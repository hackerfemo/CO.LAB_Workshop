let testMessages: string[] = []
let testBeatMsgs: string[] = []
let Active_Chord: number[] = []
input.onButtonPressed(Button.A, function () {
    msg = "R1"
    processMessage222()
})
input.onButtonPressed(Button.AB, function () {
    msg = testBeatMsgs[Math.randomRange(0, 3)]
    processMessage222()
})
input.onButtonPressed(Button.B, function () {
    msg = testMessages[Math.randomRange(0, 2)]
    processMessage222()
})
// When Recieve Radio Message
radio.onReceivedString(function (receivedString) {
    // Tells you when it is recieving messages
    led.toggle(0, 0)
    msg = receivedString
    processMessage222()
})
// Processes the Message and Plays a note
function processMessage222() {
    if (msg.charAt(0) == "H") {
        check_chord222()
    } else {
        if (msg == "R.") {
            music.rest(5)
            neopixel.colors(NeoPixelColors.Black)
        } else if (msg.charAt(0) == "R") {
            if (msg.charAt(1) == "P") {
                ProModeNote = msg.charAt(2)
                NeoPixels(index)
                music.ringTone(getFrequencyForNoteName(ProModeNote))
            } else if (Active_Chord == CMaj) {
                playNoteFromNoteNumberAndChord(2, CMaj)
            } else if (Active_Chord == G7Maj) {
                playNoteFromNoteNumberAndChord(2, G7Maj)
            } else if (Active_Chord == FMaj) {
                playNoteFromNoteNumberAndChord(2, FMaj)
            } else {
                music.rest(5)
                NeoPixels(4)
            }
        }
    }
}
// Checks what chord is being set by the Harmony Glove
function check_chord222() {
    if (msg.charAt(1) == "C") {
        Active_Chord = CMaj
        basic.clearScreen()
        led.plot(4, 0)
    } else if (msg.charAt(1) == "G") {
        Active_Chord = G7Maj
        basic.clearScreen()
        led.plot(4, 1)
    } else if (msg.charAt(1) == "F") {
        Active_Chord = FMaj
        basic.clearScreen()
        led.plot(4, 2)
    }
}
let noteFs: number[] = []
let index = 0
let CMaj: number[] = []
let G7Maj: number[] = []
let ProModeNote = ""
let NeoPixelColors2: number[] = []
let strip: neopixel.Strip = null
let NoteLengthPos = 0
let msg = ""
let FMaj: number[] = []
let NoteLength: BeatFraction[] = []
testMessages = ["HC", "HG", "HF"]
testBeatMsgs = ["R1", "R2", "R3", "R4"]
strip = neopixel.create(DigitalPin.P1, 5, NeoPixelMode.RGB)
NeoPixelColors2 = [neopixel.colors(NeoPixelColors.Red), neopixel.colors(NeoPixelColors.Green), neopixel.rgb(255, 255, 255), neopixel.colors(NeoPixelColors.Yellow), neopixel.colors(NeoPixelColors.Purple)]
strip.setBrightness(255)
strip.showColor(neopixel.colors(NeoPixelColors.Red))
function NeoPixels(index: number) {
    strip.showColor(neopixel.colors(NeoPixelColors2[index]))
}
// Playing note from Message sent and chord set
function playNoteFromNoteNumberAndChord(NoteNum: number, chordIxs: number[]) {
    let FsIx = chordIxs[NoteNum]
    NoteLengthPos = parseInt(msg.charAt(1))
    music.playTone(noteFs[FsIx], (NoteLength[NoteLengthPos - 1]))
    strip.showColor(neopixel.colors(NeoPixelColors.Red))
    basic.pause(25)
    strip.showColor(neopixel.colors(NeoPixelColors.Black))
}
// setting up chord arrays
CMaj = [2, 4, 6]
G7Maj = [6, 1, 3, 5]
FMaj = [5, 7, 2]
NoteLength = [BeatFraction.Eighth, BeatFraction.Quarter, BeatFraction.Half, BeatFraction.Whole]
Active_Chord = CMaj
// Pro Mode - Plays note from the Note Name
function getFrequencyForNoteName(noteName: string) {
    index = noteName.charCodeAt(0) - 65
    return noteFs[index]
    return index
}
// Frequency and Test array setups
noteFs = [220, 247, 131, 147, 165, 175, 196]
// Radio Setup
if (input.buttonIsPressed(Button.A)) {
    radio.setGroup(42)
    basic.showNumber(42)
} else if (input.buttonIsPressed(Button.B)) {
    radio.setGroup(43)
    basic.showNumber(43)
} else {
    radio.setGroup(41)
    basic.showNumber(41)
}
// Check to see if there is power
basic.showLeds(`
    # # . . .
    # . . . .
    # . # # .
    . . # . .
    . . # . .
    `)
